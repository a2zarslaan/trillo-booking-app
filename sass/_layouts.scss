.container {
  max-width: 120rem;
  margin: 8rem auto;
  background-color: var(--color-grey-light-1);

  //we cannot just use colors as variables, we can use other things as well, so we'll create a variable for the values inside box-shadow
  box-shadow: var(--shadow-dark);

  min-height: 50rem;
}

.header {
  //this is the font-size to get a bigger size in placeholder text, this will overwrite the inherited font-size
  font-size: 1.4rem;
  height: 7rem;
  background-color: #fff;
  border-bottom: var(--line);

  display: flex;
  justify-content: space-between;
  align-items: center;
}

.content {
  display: flex;
}

.sidebar {
  background-color: var(--color-grey-dark-1);

  //flex-grow, shrink and basis in one single property, in order. We don't want the element to grow or shrink so we just give it a width. We don't have to give a shrink value as due to the percentages, the element will shrink itself when container size is smaller
  flex: 0 0 18%;

  //here we're setting the component as a flex container, above we're using the properties of flexbox as this component itself is inside a flex container
  display: flex;

  //to create a space between legal text and navbar items
  flex-direction: column;
  justify-content: space-between;
}

.hotel-view {
  background-color: #fff;

  //here we want the element to grow as much space it gets so we'll set flex-grow to 1, using flex shorthand property
  flex: 1;
}

.detail {
  font-size: 1.4rem;
  display: flex;
  padding: 4.5rem;
  background-color: var(--color-grey-light-1);
  border: var(--line);
}

//description and user-reviews are kept side by side as they are siblings according to html structure
.description {
  //giving the font size to parent then inheriting later
  //font-size: 1.4rem;
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;

  //we want this element to take 60% of the width, hence flex-baisis here is 60%
  flex: 0 0 60%;

  margin-right: 4.5rem;
}

.user-reviews {
  //we want this element to take the width remaining out of the 60% taken by description element, hence flex-grow is 1
  flex: 1;

  //to align the show all button we could have used text-align: center but that would center all the content in the container too, which is undesired. That's why we'll use flexbox align items
  display: flex;
  flex-direction: column;

  //now with the default preoperties the line under the button will stretch all the way to from left to the right of the container, because the default for align-items is stretch. We have to change it to center
  align-items: center;
}
