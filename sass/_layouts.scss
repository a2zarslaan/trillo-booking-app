.container {
  max-width: 120rem;
  margin: 8rem auto;
  background-color: var(--color-grey-light-1);

  //we cannot just use colors as variables, we can use other things as well, so we'll create a variable for the values inside box-shadow
  box-shadow: var(--shadow-dark);

  min-height: 50rem;

  //adding media queries for a desktop first strategy. What's important to note here is that we're going to use em as the unit and also we'll define a variable for the width
  @media only screen and (max-width: $bp-largest) {
    //removing the pink bg from the top
    margin: 0;

    //reducing the root font size on large bp will cause shrinkage of the container, and the pink bg will be visible again. To deal with it, we'll make width and max-width as 100%, both just to be on a safe side. But we'll still have pink bg at the bottom to deal with. It'll only show up at unusually long screens, otherwise it won't. When the wesite page takes the height of the viewport, this part of the pink bg won't show
    max-width: 100%;
    width: 100%;
  }
}

.header {
  //this is the font-size to get a bigger size in placeholder text, this will overwrite the inherited font-size
  font-size: 1.4rem;
  height: 7rem;
  background-color: #fff;
  border-bottom: var(--line);

  display: flex;
  justify-content: space-between;
  align-items: center;

  @media only screen and (max-width: $bp-smallest) {
    //to make the search bar go one line below for bp-smallest
    flex-wrap: wrap;

    //spacing search bar and header elements evenly
    align-content: space-around;

    //giving some height to header to give some free space as there are 2 lines now, search bar being on 2nd line
    height: 11rem;
  }
}

.content {
  display: flex;

  //to put the navbar on top for 900px and smaller screens, we'll change flex direction
  @media only screen and (max-width: $bp-medium) {
    flex-direction: column;
  }
}

.sidebar {
  background-color: var(--color-grey-dark-1);

  //flex-grow, shrink and basis in one single property, in order. We don't want the element to grow or shrink so we just give it a width. We don't have to give a shrink value as due to the percentages, the element will shrink itself when container size is smaller
  flex: 0 0 18%;

  //here we're setting the component as a flex container, above we're using the properties of flexbox as this component itself is inside a flex container
  display: flex;

  //to create a space between legal text and navbar items
  flex-direction: column;
  justify-content: space-between;
}

.hotel-view {
  background-color: #fff;

  //here we want the element to grow as much space it gets so we'll set flex-grow to 1, using flex shorthand property
  flex: 1;
}

.detail {
  font-size: 1.4rem;
  display: flex;
  padding: 4.5rem;
  background-color: var(--color-grey-light-1);
  border: var(--line);

  //reducing excess padding and extra whitespace for all screens below 900
  @media only screen and (max-width: $bp-medium) {
    padding: 3rem;
  }

  //putting description and user reviews side by side for smaller screens (600px)
  @media only screen and (max-width: $bp-small) {
    flex-direction: column;
  }
}

//description and user-reviews are kept side by side as they are siblings according to html structure
.description {
  //giving the font size to parent then inheriting later
  //font-size: 1.4rem;
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;

  //we want this element to take 60% of the width, hence flex-baisis here is 60%
  flex: 0 0 60%;

  margin-right: 4.5rem;

  //reducing excess padding and extra whitespace for all screens below 900
  @media only screen and (max-width: $bp-medium) {
    padding: 2rem;
    margin-right: 3rem;
  }

  //redusing side margins for sections and fixing smaller abnormalities for bp-small. Here are some conflicting declarations like margin right, but because of the correct order we'll achieve the desired effect
  @media only screen and (max-width: $bp-small) {
    margin-right: 0;
    margin-bottom: 3rem;
  }
}

.user-reviews {
  //we want this element to take the width remaining out of the 60% taken by description element, hence flex-grow is 1
  flex: 1;

  //to align the show all button we could have used text-align: center but that would center all the content in the container too, which is undesired. That's why we'll use flexbox align items
  display: flex;
  flex-direction: column;

  //now with the default preoperties the line under the button will stretch all the way to from left to the right of the container, because the default for align-items is stretch. We have to change it to center
  align-items: center;
}
