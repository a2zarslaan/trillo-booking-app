/////////////////////////////////////////
//logo
.logo {
  height: 3.25rem;
  margin-left: 3rem;
}

/////////////////////////////////////////
//search
.search {
  flex: 0 0 40%;

  //to center the search icon vertically and horizontally
  display: flex;
  align-items: center;
  justify-content: center;

  //changing the order in which elements appear in the top bar for bp-smallest
  @media only screen and (max-width: $bp-smallest) {
    //default order value is 0 for all elements, so when we give it value 1, it'll move to the end of the line
    order: 1;

    //to make the search bar take 100% of the empty width in a new line for bp-smallest
    flex: 0 0 100%;

    //to make search bar look uniform with the bg
    background-color: var(--color-grey-light-2);
  }

  &__input {
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: 0.7rem 2rem;
    border-radius: 100px;
    width: 90%;
    transition: all 0.2s;

    //to get the search icon inside of this container, we extend it a bit towards the right
    margin-right: -3.5rem;

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    //stylising the placeholder text
    &::-webkit-input-placeholder {
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }
  &__button {
    border: none;
    background-color: var(--color-grey-light-2);

    &:focus {
      outline: none;
    }

    &:active {
      //to move the button down when we click it, to create a pressing effect
      transform: translateY(2px);
    }
  }
  &__icon {
    height: 2rem;
    width: 2rem;

    //to change the color of the SVG icon, we use fill property
    fill: var(--color-grey-dark-3);
  }
}

/////////////////////////////////////////
//user navigation
.user-nav {
  //to make the nav bar elements take all the vertical space in the header
  align-self: stretch;

  display: flex;
  align-items: center;

  //the following selector selects all the user nav's direct children
  & > * {
    padding: 0 2rem;
    cursor: pointer;

    //top enable full vertical space hovering instead of small tab sized hover
    height: 100%;

    //to vertically center back the icons in the nav bar
    display: flex;
    align-items: center;
  }

  & > *:hover {
    background-color: var(--color-grey-light-2);
  }

  &__icon-box {
    //for the aboslute positioning of the notification counting red bubble
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-2);
  }

  &__notification {
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;

    //to make the red bubble round
    border-radius: 50%;

    background-color: var(--color-primary);
    color: #fff;

    //flexbox doesn't give us a way to perfectly position an element exactly where we want it, so we'll use absolute positioning for that.
    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    //to center the notification count text inside the red bubble
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user-photo {
    height: 3.75rem;
    border-radius: 50%;

    //to create some separation between the photo and the name
    margin-right: 1rem;
  }
}

////////////////////////////////
//side

.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  @media only screen and (max-width: $bp-medium) {
    //to put navbar items beside each other for screens lower than 900px
    display: flex;

    //remove the top margin
    margin: 0;
  }

  &__item {
    //for hovering effect's absolute position below
    position: relative;

    &:not(::last-child) {
      margin-bottom: 0.5rem;

      //removing the bottom margin for smaller screens
      @media only screen and (max-width: $bp-medium) {
        margin: 0;
      }
    }

    //giving all the navbar items equal width for all screens below 900
    @media only screen and (max-width: $bp-medium) {
      flex: 1;
    }
  }

  //to create the hover effect
  &__item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 3px;
    background-color: var(--color-primary);
    transform: scaleY(0);

    //we can add different transitions for different properties
    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,
      background-color 0.1s; //this animation for width will take .4s and will start with a delay of .2s
  }

  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1);
    width: 100%;
  }

  //color changing on hover
  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 3rem;

    //z-index only works when we have a specified position
    position: relative;
    z-index: 100;

    display: flex;
    align-items: center;

    //center aligning the navbar items for smaller screen sizes
    @media only screen and (max-width: $bp-medium) {
      justify-content: center;
      padding: 2rem;
    }

    //fixing the problems with navbar text for smaller screen sizes. Here we want the icon to appear on top of text instead of the text wrapping to second line
    @media only screen and (max-width: $bp-small) {
      flex-direction: column;
      padding: 1.5rem 0.5rem;
    }
  }

  &__icon {
    //setting a size for the icons
    width: 1.75rem;
    height: 1.75rem;

    margin-right: 2rem;

    //using the color of the parent
    fill: currentColor;

    //dealing with the margin right of the icons, which is not letting it align to the center even with text0align as center. Right now the margin is at the top of the text not the side
    @media only screen and (max-width: $bp-small) {
      margin-right: 0;
      margin-bottom: 0.7rem;
      width: 1.5rem;
      height: 1.5rem;
    }
  }
}

////////////////////////
//legal text
.legal {
  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  text-align: center;
  padding: 2.5rem;

  //removing legal text for screens smaller than 900px as it was shown just under the navbar
  @media only screen and (max-width: $bp-medium) {
    display: none;
  }
}

////////////////////////
//gallery
.gallery {
  display: flex;
  &__photo {
    width: 100%;

    //to avoid the white space under the images, we're turning them to block instead of inline. Inline images will have a small white space under them. We can also use inline-block and that would also solve the problem
    display: block;
  }
}

////////////////////////
//hotel overview
.overview {
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-bottom: var(--line);

  &__heading {
    font-size: 2.5rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;

    //fixing the font for smaller screen sizes
    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
      padding: 1.25rem 2rem;
    }
  }

  &__stars {
    // this will occupy all the avaialble space, so it'll push all the elements adjacent to it, to the corner, we'll use flex-grow as 1. But the problem here is that the stars element will take up the whole space between itself and the adjacent element. To solver it, we will use margin-right: auto
    //Margin auto is a very powerful trick combined with flexbox as it helps position elements in weird situations like this
    //flex: 1;

    margin-right: auto;

    //the stars are SVG elements, and just like inline elements, SVG elements also have a small whitespace udner them, which will cause misalignment or unexpected behavior. Hence we're converting their parent element, that is, the stars container to flex to remove the white space under them. We could have also done it by reducing the line-height and font-size to zero, but just changing the display of the parent element seems more straightforward.
    display: flex;
  }

  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center;
  }

  &__icon-location {
    margin-right: 0.5rem;
  }

  &__rating {
    background-color: var(--color-primary);
    color: #fff;
    margin-left: 3rem;
    padding: 0 2.25rem;
    align-self: stretch;

    //to center the contents of this container
    display: flex;

    //to prevent elements from coming side by side
    flex-direction: column;
    align-items: center;
    justify-content: center;

    @media only screen and (max-width: $bp-small) {
      padding: 0 1.5rem;
    }
  }

  &__rating-count {
    font-size: 0.8rem;
    text-transform: uppercase;

    @media only screen and (max-width: $bp-small) {
      font-size: 0.5rem;
    }
  }

  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
    }
  }
}

////////////////////////
//button inline
.btn-inline {
  border: none;
  color: var(--color-primary);

  //forcing font-size inheritance will make the button more modular and more reusable. We can throw it anywhere and it will size itlsef according to the parent's font-size
  font-size: inherit;

  //using currentcolor to make the button more reusbale again. So when we hover on the element, the border will automatically take up the color that the element is supposed to take on hover. This means we need to write less code
  border-bottom: 1px solid currentColor;

  padding-bottom: 2px;
  display: inline-block;

  //making the bg transparent will again make the button more reusable, we can throw it anywhere and get  a nice looking button
  background-color: transparent;

  cursor: pointer;
  transition: 0.2s;

  & span {
    margin-left: 3px;
    transition: margin-left 0.2s;
  }

  &:hover {
    color: var(--color-grey-dark-1);

    span {
      margin-left: 8px;
    }
  }

  &:focus {
    //to remove the defailt blue border on focus
    outline: none;

    //infinite keyword can make the animation last infinitely long as long as the condition is satisfied
    animation: pulsate 1s infinite;
  }
}

//creating the pulsating animation
@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25);
  }

  100% {
    transform: scale(1);
    box-shadow: none;
  }
}

////////////////////////
//paragraph

//adding bottom margin for all children except for the last one. We could've used last-child, but that would not work because the second paragraph is not the last child of the document. last-of-type will select the last child of type paragraph
.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}

////////////////////////
//list
.list {
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: var(--line);
  border-bottom: var(--line);

  //putting list items side by side. The next two commands will put all list items next to each other without any space in between
  display: flex;
  flex-wrap: wrap;

  &__item {
    //50% width so that 2 elements can be side by side
    flex: 0 0 50%;

    margin-bottom: 0.7rem;
  }

  //we'll put the arrow icon before the list elements because it is generally a good practise. We could have put it in the &__item selector above but this is a better practise.
  &__item::before {
    content: "";
    display: inline-block;
    height: 2rem;
    width: 2rem;
    margin-right: 0.7rem;

    //approach for older browsers
    background-image: url(../img/chevron-thin-right.svg);
    background-size: cover;

    //CODE EDITOR SAYS THE WEBKIT PROPERTIES BELOW ARE NON STANDARD. SO USING THE REGULAR METHOD ABOVE
    //approach for newer browsers, setting the whole block of area pink
    //background-color: (--color-primary);
    //similar to clipping, we'll put a mask on top of this background that is the shape of the icon, and that will make the icon look colored
    //-webkit-mask-image: url(../img/chevron-thin-right.svg);
    //-webkit-mask-size: cover;
  }
}

////////////////////////
//recommend
.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);

  display: flex;

  //using the same trick to push the images to the right corner
  align-items: center;

  &__count {
    //using the same trick to push the images to the right corner
    margin-right: auto;
  }

  &__friends {
    //tp keep the images side by side all the time
    display: flex;
  }

  &__photo {
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    border: 3px solid #fff;
    box-sizing: content-box;

    //giving the images a negative margin to produce an overlap effect, but this will reduce the size of the images as the border will come inwards. We can solve that by using a box-sizing property that is not border-box, because border box does exactly what we don't want here to happen. So we'll set the box sizing back to content-box above, which is the default value.
    &:not(:last-child) {
      margin-right: -2rem;
    }
  }
}

////////////////////////
//reviews
.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;

  //for absolute positioning of the quotation mark
  position: relative;
  overflow: hidden;

  //reducing excess padding and extra whitespace for all screens below 900
  @media only screen and (max-width: $bp-medium) {
    padding: 2rem;
    margin-bottom: 3rem;
  }

  &__text {
    margin-bottom: 2rem;

    //to show the text on top of the designer quotation mark
    z-index: 10;

    //z-index will only work if we set the position
    position: relative;
  }

  &__user {
    display: flex;
    align-items: center;
  }

  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1rem;
  }

  &__user-box {
    //using the same margin auto trick with flex box to push the rating to the right
    margin-right: auto;
  }

  &__user-name {
    font-size: 1.1rem;
    font-weight: 700;
    text-transform: uppercase;
    margin-bottom: 0.4rem;
  }

  &__user-date {
    font-size: 1.1rem;
    font-weight: 300;
    color: var(--color-grey-dark-3);
  }

  &__rating {
    font-size: 2.5rem;
    font-weight: 300;
    color: var(--color-primary);
  }

  //we'll use pseudo elements to add the big quotation mark in the background of review box
  &::before {
    //we'll put the quotation mark in the content. We'll use the symbol for quotation marks in the document. HMTL and CSS symbols for the same thing are different, a simple google search will return the results. CSS represents symbols in the form of iso numbers
    content: "\201C";

    //we'll use absolute positioning here because it will give us the precise control we want
    position: absolute;

    top: -2.75rem;
    left: -1rem;

    //default line height for a font this big would be massive, we need to reduce it
    line-height: 1;

    font-size: 20rem;
    color: var(--color-grey-light-2);

    //currently it is inheriting default font family, quotation marks in that don't look good
    font-family: sans-serif;

    z-index: 1;
  }
}

////////////////////////
//cta

.cta {
  padding: 3.5rem 0;
  text-align: center;

  //reducing excess padding and extra whitespace for all screens below 900
  @media only screen and (max-width: $bp-medium) {
    padding: 2.5rem 0;
  }

  &__book-now {
    font-size: 2rem;
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem;
  }
}

//////////////////////////
//call to action

.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 100px;
  border: none;
  background-image: linear-gradient(
    to right,
    var(--color-primary-light),
    var(--color-primary-dark)
  );
  color: #fff;

  //for absolute positioning of invisible part of the button
  position: relative;

  overflow: hidden;

  cursor: pointer;

  //selecting all the child elements to apply the repeated code on all of them, just to follow dry principle
  & > * {
    //to be able to use padding
    display: inline-block;
    height: 100%;
    width: 100%;
    transition: all 0.2s;
  }

  &__visible {
    //padding will define the size of the button
    padding: 2rem 7.5rem;
  }

  &__invisible {
    position: absolute;
    padding: 2rem 0;
    left: 0;

    //if we use percentages here, the element will move up exactly as much as the size of the element is, for eg, 100px high element will move up 100px to totlally disappear
    top: -100%;
  }

  //change gradient on hover
  &:hover {
    background-image: linear-gradient(
      to left,
      var(--color-primary-light),
      var(--color-primary-dark)
    );
  }

  &:hover &__visible {
    transform: translateY(100%);
  }

  &:hover &__invisible {
    top: 0;
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}
