/////////////////////////////////////////
//logo
.logo {
  height: 3.25rem;
  margin-left: 3rem;
}

/////////////////////////////////////////
//search
.search {
  flex: 0 0 40%;

  //to center the search icon vertically and horizontally
  display: flex;
  align-items: center;
  justify-content: center;
  &__input {
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: 0.7rem 2rem;
    border-radius: 100px;
    width: 90%;
    transition: all 0.2s;

    //to get the search icon inside of this container, we extend it a bit towards the right
    margin-right: -3.5rem;

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    //stylising the placeholder text
    &::-webkit-input-placeholder {
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }
  &__button {
    border: none;
    background-color: var(--color-grey-light-2);

    &:focus {
      outline: none;
    }

    &:active {
      //to move the button down when we click it, to create a pressing effect
      transform: translateY(2px);
    }
  }
  &__icon {
    height: 2rem;
    width: 2rem;

    //to change the color of the SVG icon, we use fill property
    fill: var(--color-grey-dark-3);
  }
}

/////////////////////////////////////////
//user navigation
.user-nav {
  //to make the nav bar elements take all the vertical space in the header
  align-self: stretch;

  display: flex;
  align-items: center;

  //the following selector selects all the user nav's direct children
  & > * {
    padding: 0 2rem;
    cursor: pointer;

    //top enable full vertical space hovering instead of small tab sized hover
    height: 100%;

    //to vertically center back the icons in the nav bar
    display: flex;
    align-items: center;
  }

  & > *:hover {
    background-color: var(--color-grey-light-2);
  }

  &__icon-box {
    //for the aboslute positioning of the notification counting red bubble
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-2);
  }

  &__notification {
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;

    //to make the red bubble round
    border-radius: 50%;

    background-color: var(--color-primary);
    color: #fff;

    //flexbox doesn't give us a way to perfectly position an element exactly where we want it, so we'll use absolute positioning for that.
    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    //to center the notification count text inside the red bubble
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user-photo {
    height: 3.75rem;
    border-radius: 50%;

    //to create some separation between the photo and the name
    margin-right: 1rem;
  }
}

////////////////////////////////
//side

.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  &__item {
    //for hovering effect's absolute position below
    position: relative;

    &:not(::last-child) {
      margin-bottom: 0.5rem;
    }
  }

  //to create the hover effect
  &__item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 3px;
    background-color: var(--color-primary);
    transform: scaleY(0);

    //we can add different transitions for different properties
    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,
      background-color 0.1s; //this animation for width will take .4s and will start with a delay of .2s
  }

  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1);
    width: 100%;
  }

  //color changing on hover
  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 3rem;

    //z-index only works when we have a specified position
    position: relative;
    z-index: 100;

    display: flex;
    align-items: center;
  }

  &__icon {
    //setting a size for the icons
    width: 1.75rem;
    height: 1.75rem;

    margin-right: 2rem;

    //using the color of the parent
    fill: currentColor;
  }
}

////////////////////////
//legal text
.legal {
  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  text-align: center;
  padding: 2.5rem;
}

////////////////////////
//gallery
.gallery {
  display: flex;
  &__photo {
    width: 100%;

    //to avoid the white space under the images, we're turning them to block instead of inline. Inline images will have a small white space under them. We can also use inline-block and that would also solve the problem
    display: block;
  }
}

////////////////////////
//hotel overview
.overview {
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-bottom: 1px solid var(--color-grey-light-2);

  &__heading {
    font-size: 2.5rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;
  }

  &__stars {
    // this will occupy all the avaialble space, so it'll push all the elements adjacent to it, to the corner, we'll use flex-grow as 1. But the problem here is that the stars element will take up the whole space between itself and the adjacent element. To solver it, we will use margin-right: auto
    //Margin auto is a very powerful trick combined with flexbox as it helps position elements in weird situations like this
    //flex: 1;

    margin-right: auto;

    //the stars are SVG elements, and just like inline elements, SVG elements also have a small whitespace udner them, which will cause misalignment or unexpected behavior. Hence we're converting their parent element, that is, the stars container to flex to remove the white space under them. We could have also done it by reducing the line-height and font-size to zero, but just changing the display of the parent element seems more straightforward.
    display: flex;
  }

  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center;
  }

  &__icon-location {
    margin-right: 0.5rem;
  }

  &__rating {
    background-color: var(--color-primary);
    color: #fff;
    margin-left: 3rem;
    padding: 0 2.25rem;
    align-self: stretch;

    //to center the contents of this container
    display: flex;

    //to prevent elements from coming side by side
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  &__rating-count {
    font-size: 0.8rem;
    text-transform: uppercase;
  }

  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;
  }
}

////////////////////////
//button inline
.btn-inline {
  border: none;
  color: var(--color-primary);

  //forcing font-size inheritance will make the button more modular and more reusable. We can throw it anywhere and it will size itlsef according to the parent's font-size
  font-size: inherit;

  //using currentcolor to make the button more reusbale again. So when we hover on the element, the border will automatically take up the color that the element is supposed to take on hover. This means we need to write less code
  border-bottom: 1px solid currentColor;

  padding-bottom: 2px;
  display: inline-block;

  //making the bg transparent will again make the button more reusable, we can throw it anywhere and get  a nice looking button
  background-color: transparent;

  cursor: pointer;
  transition: 0.2s;

  &:hover {
    color: var(--color-grey-dark-1);
  }

  &:focus {
    //to remove the defailt blue border on focus
    outline: none;

    //infinite keyword can make the animation last infinitely long as long as the condition is satisfied
    animation: pulsate 1s infinite;
  }
}

//creating the pulsating animation
@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25);
  }

  100% {
    transform: scale(1);
    box-shadow: none;
  }
}
